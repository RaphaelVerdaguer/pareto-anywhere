version: "3.9"
services:
  pareto-anywhere:
    depends_on:
      setup:
        condition: service_healthy
      es01:
        condition: service_healthy
    build:
      context: .
      dockerfile: Dockerfile
    image: reelyactive/pareto-anywhere:latest
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    container_name: pareto-anywhere
    restart: unless-stopped
    ports:
      - "${PARETO_PORT}:${PARETO_PORT}/tcp"
      - "50000:50000/udp"
      - "50001:50001/udp"
    mem_limit: ${MEM_LIMIT_PARETO}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl --fail http://localhost:${PARETO_PORT} || exit 1"
        ]
      interval: 1s
      timeout: 5s
      retries: 120
    networks:
      - pareto-anywhere-elastic

  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        # Check if CA certificate exists
        if [ ! -f config/certs/ca/ca.crt ]; then
          echo "Generating Wildcard SSL certs for ES (in PEM format)..."
          bin/elasticsearch-certutil ca --pem --days ${DAYS} --out config/certs/elkstack-ca.zip
          unzip -d config/certs config/certs/elkstack-ca.zip
          bin/elasticsearch-certutil cert \
            --name elkstack-certs \
            --ca-cert config/certs/ca/ca.crt \
            --ca-key config/certs/ca/ca.key \
            --pem \
            --dns "*.${DOMAIN_SUFFIX},localhost,${NODE1_NAME},${NODE2_NAME},${NODE3_NAME}" \
            --ip 127.0.0.1 \
            --ip 127.0.0.1 \
            --ip 127.0.0.1 \
            --days ${DAYS} \
            --out config/certs/elkstack-certs.zip
          unzip -d config/certs config/certs/elkstack-certs.zip
        else
          echo "CA certificate already exists. Skipping Certificates generation."
        fi
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" https://${NODE1_NAME}:${ES_PORT} | grep -q "${CLUSTER_NAME}"; do
        sleep 5
        echo -n "Waiting for Elasticsearch availability..."
        done;
        # Set kibana_system password
        if curl -sk -XGET --cacert config/certs/ca/ca.crt "https://${NODE1_NAME}:9200" -u "kibana_system:${KIBANA_PASSWORD}" | grep -q "${CLUSTER_NAME}"; then
          echo "Password for kibana_system is working. Proceeding with Elasticsearch setup for kibana_system."
        else
          echo "Failed to authenticate with kibana_system password. Trying to set the password for kibana_system."
          until curl -s -XPOST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://${NODE1_NAME}:${ES_PORT}/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do
          sleep 5
          echo -n "Try setting kibana_system password..."
          done;
        fi
        #echo "Setting kibana ${RAPHAEL_USER} password";
        curl -X POST --cacert config/certs/ca/ca.crt "https://${NODE1_NAME}:${ES_PORT}/_security/user/${RAPHAEL_USER}" -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" -d "{\"password\": \"${RAPHAEL_PASSWORD}\", \"enabled\": true, \"roles\": [\"superuser\", \"kibana_admin\"], \"full_name\": \"${RAPHAEL_USER}\", \"email\": \"\", \"metadata\": {\"intelligence\": 1}}"
        #echo "Setting kibana ${MICKAEL_USER} password";
        curl -X POST --cacert config/certs/ca/ca.crt "https://${NODE1_NAME}:${ES_PORT}/_security/user/${MICKAEL_USER}" -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" -d "{\"password\": \"${MICKAEL_PASSWORD}\", \"enabled\": true, \"roles\": [\"superuser\", \"kibana_admin\"], \"full_name\": \"${MICKAEL_USER}\", \"email\": \"\", \"metadata\": {\"intelligence\": 1}}"
        #echo "Setting kibana ${BACKEND_USER} password";
        curl -X POST --cacert config/certs/ca/ca.crt "https://${NODE1_NAME}:${ES_PORT}/_security/user/${BACKEND_USER}" -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" -d "{\"password\": \"${BACKEND_PASSWORD}\", \"enabled\": true, \"roles\": [\"editor\"], \"full_name\": \"${BACKEND_USER}\", \"email\": \"\", \"metadata\": {\"intelligence\": 1}}"
        echo "All done!";
      '
    mem_limit: ${MEM_LIMIT_SETUP}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "[ -f config/certs/elkstack-certs/elkstack-certs.crt ]"
        ]
      interval: 1s
      timeout: 5s
      retries: 120
    networks:
      - pareto-anywhere-elastic

  es01:
    restart: unless-stopped
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    ports:
      - ${ES_PORT}:${ES_PORT}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata01:/usr/share/elasticsearch/data
      - backup:/usr/share/elasticsearch/backup
    environment:
      - path.repo=/usr/share/elasticsearch/backup
      - node.name=${NODE1_NAME}
      #- network.publish_host=${NODE1}
      #- "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      #- xpack.security.enrollment.enabled=false
      #- xpack.security.autoconfiguration.enabled=false
      #- node.attr.data=hot #node.roles=data_hot
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=${NODE1_NAME},${NODE2_NAME},${NODE3_NAME}
      - discovery.seed_hosts=${NODE1_NAME},${NODE2_NAME},${NODE3_NAME}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/elkstack-certs/elkstack-certs.key
      - xpack.security.http.ssl.certificate=certs/elkstack-certs/elkstack-certs.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.http.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/elkstack-certs/elkstack-certs.key
      - xpack.security.transport.ssl.certificate=certs/elkstack-certs/elkstack-certs.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
      - KIBANA_USERNAME=${KIBANA_USERNAME}
      - KIBANA_PASSWORD=${KIBANA_PASSWORD}
    mem_limit: ${MEM_LIMIT_ES}
    ulimits:
      memlock:
        soft: -1
        hard: -1
      #nofile:
      #  soft: 65536
      #  hard: 65536
      #nproc:
      #  soft: 2048
      #  hard: 2048
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl --fail -k -s -u elastic:${ELASTIC_PASSWORD} --cacert config/certs/ca/ca.crt https://${NODE1_NAME}:9200"
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      - pareto-anywhere-elastic

  es02:
    restart: unless-stopped
    depends_on:
      - ${NODE1_NAME}
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata02:/usr/share/elasticsearch/data
      - backup:/usr/share/elasticsearch/backup
    environment:
      - path.repo=/usr/share/elasticsearch/backup
      - node.name=${NODE2_NAME}
      #- network.publish_host=${NODE2}
      #- "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      #- xpack.security.enrollment.enabled=false
      #- xpack.security.autoconfiguration.enabled=false
      #- node.attr.data=warm #      - node.roles=data_warm
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=${NODE1_NAME},${NODE2_NAME},${NODE3_NAME}
      - discovery.seed_hosts=${NODE1_NAME},${NODE2_NAME},${NODE3_NAME}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/elkstack-certs/elkstack-certs.key
      - xpack.security.http.ssl.certificate=certs/elkstack-certs/elkstack-certs.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.http.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/elkstack-certs/elkstack-certs.key
      - xpack.security.transport.ssl.certificate=certs/elkstack-certs/elkstack-certs.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
      - KIBANA_USERNAME=${KIBANA_USERNAME}
      - KIBANA_PASSWORD=${KIBANA_PASSWORD}
    mem_limit: ${MEM_LIMIT_ES}
    ulimits:
      memlock:
        soft: -1
        hard: -1
      #nofile:
      #  soft: 65536
      #  hard: 65536
      #nproc:
      #  soft: 2048
      #  hard: 2048
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl --fail -k -s -u elastic:${ELASTIC_PASSWORD} --cacert config/certs/ca/ca.crt https://${NODE2_NAME}:9200"
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      - pareto-anywhere-elastic

  es03:
    restart: unless-stopped
    depends_on:
      - ${NODE2_NAME}
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata03:/usr/share/elasticsearch/data
      - backup:/usr/share/elasticsearch/backup
    environment:
      - path.repo=/usr/share/elasticsearch/backup
      - node.name=${NODE3_NAME}
      #- network.publish_host=${NODE3}
      #- "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      #- xpack.security.enrollment.enabled=false
      #- xpack.security.autoconfiguration.enabled=false
      #- node.attr.data=cold #      - node.roles=data_cold
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=${NODE1_NAME},${NODE2_NAME},${NODE3_NAME}
      - discovery.seed_hosts=${NODE1_NAME},${NODE2_NAME},${NODE3_NAME}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/elkstack-certs/elkstack-certs.key
      - xpack.security.http.ssl.certificate=certs/elkstack-certs/elkstack-certs.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.http.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/elkstack-certs/elkstack-certs.key
      - xpack.security.transport.ssl.certificate=certs/elkstack-certs/elkstack-certs.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
      - KIBANA_USERNAME=${KIBANA_USERNAME}
      - KIBANA_PASSWORD=${KIBANA_PASSWORD}
    mem_limit: ${MEM_LIMIT_ES}
    ulimits:
      memlock:
        soft: -1
        hard: -1
      #nofile:
      #  soft: 65536
      #  hard: 65536
      #nproc:
      #  soft: 2048
      #  hard: 2048
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl --fail -k -s -u elastic:${ELASTIC_PASSWORD} --cacert config/certs/ca/ca.crt https://${NODE3_NAME}:9200"
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      - pareto-anywhere-elastic

  kibana:
    restart: unless-stopped
    depends_on:
      es01:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibanadata:/usr/share/kibana/data
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=${KIBANA_SERVER_HOST}
      - ELASTICSEARCH_HOSTS=https://${NODE2_NAME}:${ES_PORT}
      - ELASTICSEARCH_USERNAME=${KIBANA_USERNAME}
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      - elasticsearch.ssl.verificationMode=none
      - XPACK_REPORTING_ROLES_ENABLED=false
      - XPACK_REPORTING_KIBANASERVER_HOSTNAME=localhost
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${SAVEDOBJECTS_ENCRYPTIONKEY}
      - XPACK_SECURITY_ENCRYPTIONKEY=${REPORTING_ENCRYPTIONKEY}
      - XPACK_REPORTING_ENCRYPTIONKEY=${SECURITY_ENCRYPTIONKEY}
    mem_limit: ${MEM_LIMIT_KIBANA}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'"
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      - pareto-anywhere-elastic

  backend:
    restart: unless-stopped
    depends_on:
      es01:
        condition: service_healthy
    build:
      context: ../app-ble-backend/
      dockerfile: Dockerfile
      target: base
    image: app-ble/backend:latest
    container_name: backend
    expose:
      - ${BACKEND_PORT}
    ports:
      - ${BACKEND_PORT}:${BACKEND_PORT}
    environment:
      - ES_NODE=https://${NODE1_NAME}:${ES_PORT}
    mem_limit: ${MEM_LIMIT_BACKEND}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    command: npm run start:dev
    networks:
      - pareto-anywhere-elastic

  frontend:
    restart: unless-stopped
    depends_on:
      - backend
    build:
      context: ../app-ble-frontend/
      dockerfile: Dockerfile
      target: base
    image: app-ble/frontend:latest
    container_name: frontend
    expose:
      - ${FRONTEND_PORT}
    ports:
      - ${FRONTEND_PORT}:${FRONTEND_PORT}
    environment:
      - REACT_APP_BACKEND_URL=http://serverble.duckdns.org:${BACKEND_PORT}
    mem_limit: ${MEM_LIMIT_FRONTEND}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    command: npm run start
    networks:
      - pareto-anywhere-elastic

volumes:
  certs:
    driver: local
    driver_opts:
      type: nfs
      o: "addr=192.168.1.100,nfsvers=4,rw"
      device: ":/media/raphael/HDD/nfs/elasticsearch/certs"
  esdata01:
    driver: local
  esdata02:
    driver: local
  esdata03:
    driver: local
  kibanadata:
    driver: local
  backup:
    driver: local
    driver_opts:
      type: nfs
      o: "addr=192.168.1.100,nfsvers=4,rw"
      device: ":/media/raphael/HDD/nfs/elasticsearch/backup"

networks:
  pareto-anywhere-elastic:
    driver: bridge
